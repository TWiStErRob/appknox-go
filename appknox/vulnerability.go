package appknox

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"net/http"

	"github.com/spf13/viper"
)

type VulnerabilityResponse struct {
	Data struct {
		Attributes struct {
			Name         string `json:"name"`
			Description  string `json:"description"`
			Intro        string `json:"intro"`
			Compliant    string `json:"compliant"`
			NonCompliant string `json:"non-compliant"`
		} `json:"attributes"`
	} `json:"data"`
}

func Vulnerability(args []string) (*VulnerabilityResponse, error) {
	var buf1 bytes.Buffer
	var buf2 bytes.Buffer
	apiBase := viper.GetString("api_base")
	apiHost := viper.GetString("host")
	buf1.WriteString(apiHost)
	buf1.WriteString(apiBase)
	buf1.WriteString("vulnerabilities/")
	buf1.WriteString(args[0])
	url := buf1.String()

	client := &http.Client{}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")

	buf2.WriteString("Token ")
	buf2.WriteString(viper.GetString("access_token"))
	req.Header.Set("Authorization", buf2.String())

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	responseData, err := ioutil.ReadAll(resp.Body)

	var responseObject VulnerabilityResponse
	json.Unmarshal(responseData, &responseObject)
	return &responseObject, nil
}
